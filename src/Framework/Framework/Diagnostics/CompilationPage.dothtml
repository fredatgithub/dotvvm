@viewModel DotVVM.Framework.Diagnostics.CompilationPageViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>DotVVM Compilation Status Page</title>
    <dot:RequiredResource Name="dotvvm.internal-css" />
</head>
<body ClientIDMode="Static">
    <h1>Compilation Status Page</h1>
    <dot:Button ID="compile-all-button"
                Click="{command: CompileAll(false)}"
                Text="Compile all"
                class="execute"
                class-js-compile-auto="{resource: Context.Configuration.Diagnostics.CompilationPage.ShouldCompileAllOnLoad}" />
    <dot:Button Click="{command: CompileAll(true)}"
                Text="Force recompile all"
                class="execute" />
    <dot:UpdateProgress class="compile-progress">
        <div>Compiling<span>.</span><span>.</span><span>.</span></div>
    </dot:UpdateProgress>
    <hr />
    <nav>
        <dot:Button Click="{staticCommand: ActiveTab = 0}"
                    Text="Routes"
                    class="nav"
                    Class-active="{value: ActiveTab == 0}" />
        <dot:Button Click="{staticCommand: ActiveTab = 1}"
                    Text="Controls"
                    class="nav"
                    Class-active="{value: ActiveTab == 1}" />
        <dot:Button Click="{staticCommand: ActiveTab = 2}"
                    Text="Master pages"
                    class="nav"
                    Class-active="{value: ActiveTab == 2}" />
        <dot:Button Click="{staticCommand: ActiveTab = 3}"
                    Text="Warnings"
                    class="nav"
                    Class-active="{value: ActiveTab == 3}" />
        <dot:Button Click="{staticCommand: ActiveTab = 4}"
                    Text="Errors"
                    class="nav"
                    Class-active="{value: ActiveTab == 4}" />

        <div style="float: right">
            <dot:CheckBox Checked="{value: ShowInlineDiagnostics}" Text="Show errors/warnings" />
        </div>
    </nav>
    <hr />
    <main>
        <section IncludeInPage="{value: ActiveTab == 0}">
            <h2>Routes</h2>
            <dot:GridView DataSource="{value: Routes}" class="nowrap">
                <RowDecorators>
                    <dot:Decorator Class-failure="{value: Status == 'CompilationFailed'}"
                                   Class-success="{value: Status == 'CompletedSuccessfully' && Warnings.Length == 0}" />

                    <dot:AddTemplateDecorator>
                        <After>
                            <_dotvvm-internal:CompilationDiagnosticRows
                                IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                                Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                                DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                        </After>
                    </dot:AddTemplateDecorator>
                </RowDecorators>
                <Columns>
                    <dot:GridViewTextColumn ValueBinding="{value: RouteName}"
                                            HeaderText="Route"
                                            HeaderCssClass="explosive"
                                            CssClass="explosive" />
                    <dot:GridViewTemplateColumn HeaderText="Url">
                        <ContentTemplate>
                            <span IncludeInPage={value: !HasParameters}>
                                <a href="{value: _root.PathBase + Url}">{{value: Url == "" ? "<Empty>" : Url}}</a>
                            </span>
                            <span IncludeInPage={value: HasParameters} title={value: Url}>
                                {{value: Url}}
                            </span>
                        </ContentTemplate>
                    </dot:GridViewTemplateColumn>
                    <dot:GridViewTextColumn ValueBinding="{value: VirtualPath}"
                                            HeaderText="Virtual Path">
                        <CellDecorators>
                            <dot:Decorator title={value: VirtualPath} />
                        </CellDecorators>
                    </dot:GridViewTextColumn>
                    <dot:GridViewTextColumn ValueBinding="{value: Status}"
                                            HeaderText="Status"
                                            HeaderCssClass="fit"
                                            CssClass="fit status" />
                    <dot:GridViewTemplateColumn HeaderText="Actions" HeaderCssClass="fit" CssClass="fit">
                        <ContentTemplate>
                            <span Visible="{value: Status != 'NonCompilable'}">
                                <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Compile" class="execute" />
                            </span>
                        </ContentTemplate>
                    </dot:GridViewTemplateColumn>
                </Columns>
            </dot:GridView>
        </section>

        <section IncludeInPage="{value: ActiveTab == 1}" Visible={value: _page.EvaluatingOnClient}>
            <h2>Controls</h2>
            <dot:GridView DataSource="{value: Controls}" class="nowrap">
                <RowDecorators>
                    <dot:Decorator Class-failure="{value: Status == 'CompilationFailed'}"
                                   Class-success="{value: Status == 'CompletedSuccessfully' && Warnings.Length == 0}" />
                    <dot:AddTemplateDecorator>
                        <After>
                            <_dotvvm-internal:CompilationDiagnosticRows
                                IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                                Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                                DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                        </After>
                    </dot:AddTemplateDecorator>
                </RowDecorators>
                <Columns>
                    <dot:GridViewTextColumn ValueBinding="{value: TagPrefix}"
                                            HeaderText="Prefix"
                                            HeaderCssClass="fit"
                                            CssClass="fit" />
                    <dot:GridViewTextColumn ValueBinding="{value: TagName}" HeaderText="Tag" />
                    <dot:GridViewTextColumn ValueBinding="{value: VirtualPath}" HeaderText="Virtual Path">
                        <CellDecorators>
                            <dot:Decorator title={value: VirtualPath} />
                        </CellDecorators>
                    </dot:GridViewTextColumn>
                    <dot:GridViewTextColumn ValueBinding="{value: Status}"
                                            HeaderText="Status"
                                            HeaderCssClass="fit"
                                            CssClass="fit status" />
                    <dot:GridViewTemplateColumn HeaderText="Actions" HeaderCssClass="fit" CssClass="fit">
                        <ContentTemplate>
                            <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Compile" class="execute" />
                        </ContentTemplate>
                    </dot:GridViewTemplateColumn>
                </Columns>
            </dot:GridView>
        </section>

        <section IncludeInPage="{value: ActiveTab == 2}" Visible={value: _page.EvaluatingOnClient}>
            <h2>Master pages</h2>
            <dot:GridView DataSource="{value: MasterPages}" class="nowrap">

                <RowDecorators>
                    <dot:Decorator Class-failure="{value: Status == 'CompilationFailed'}"
                                   Class-success="{value: Status == 'CompletedSuccessfully' && Warnings.Length == 0}" />
                    <dot:AddTemplateDecorator>
                        <After>
                            <_dotvvm-internal:CompilationDiagnosticRows
                                IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                                Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                                DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                        </After>
                    </dot:AddTemplateDecorator>
                </RowDecorators>
                <Columns>
                    <dot:GridViewTextColumn ValueBinding="{value: VirtualPath}" HeaderText="Virtual Path">
                        <CellDecorators>
                            <dot:Decorator title={value: VirtualPath} />
                        </CellDecorators>
                    </dot:GridViewTextColumn>
                    <dot:GridViewTextColumn ValueBinding="{value: Status}"
                                            HeaderText="Status"
                                            HeaderCssClass="fit"
                                            CssClass="fit status"/>
                    <dot:GridViewTemplateColumn HeaderText="Actions" HeaderCssClass="fit" CssClass="fit">
                        <ContentTemplate>
                            <span Visible="{value: Status != CompilationState.NonCompilable}">
                                <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Compile" class="execute" />
                            </span>
                        </ContentTemplate>
                    </dot:GridViewTemplateColumn>
                </Columns>
            </dot:GridView>
        </section>
        <section IncludeInPage={value: ActiveTab == 3 || ActiveTab == 4} Visible={value: _page.EvaluatingOnClient} >
            <h2>{{value: ActiveTab == 3 ? "Warnings" : "Errors"}}</h2>

            <p IncludeInPage={value: MasterPages.AsEnumerable().Any(m => m.Status == 'None') || Controls.AsEnumerable().Any(m => m.Status == 'None') || Routes.AsEnumerable().Any(m => m.Status == 'None')}
                style="color: var(--error-dark-color)">
                Some files have not been compiled yet. Please press the "Compile all" button to make the list of errors complete.
            </p>
            <table>
                <thead>
                    <th>Type</th>
                    <th>Name</th>
                    <th>File path</th>
                    <th>Status</th>
                    <th>Actions</th>
                </thead>
                <dot:Repeater DataSource={value: Routes.Where(r => r.Status == 'CompilationFailed' || r.Warnings.Length > 0 && ActiveTab == 3)} WrapperTagName=tbody >
                    <tr class-failure={value: Status == 'CompilationFailed'}>
                        <td>Route</td>
                        <td title={value: $"{Url} -> {RouteName}"}>
                            <span IncludeInPage={value: !HasParameters}>
                                <a href="{value: _root.PathBase + Url}">{{value: RouteName}}</a>
                            </span>
                            <span IncludeInPage={value: HasParameters}>
                                {{value: RouteName}}
                            </span>
                        </td>
                        <td title={value: VirtualPath}>{{value: VirtualPath}}</td>
                        <td>{{value: Status}}</td>
                        <td>
                            <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Recompile" class="execute" />
                        </td>
                    </tr>
                    <_dotvvm-internal:CompilationDiagnosticRows
                        IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                        Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                        DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                </dot:Repeater>
                <dot:Repeater DataSource={value: Controls.Where(r => r.Status == 'CompilationFailed' || r.Warnings.Length > 0 && ActiveTab == 3)} WrapperTagName=tbody >
                    <tr class-failure={value: Status == 'CompilationFailed'}>
                        <td>Control</td>
                        <td>
                            {{value: $"{TagPrefix}:{TagName}"}}
                        </td>
                        <td title={value: VirtualPath}>{{value: VirtualPath}}</td>
                        <td>{{value: Status}}</td>
                        <td>
                            <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Recompile" class="execute" />
                        </td>
                    </tr>
                    <_dotvvm-internal:CompilationDiagnosticRows
                        IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                        Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                        DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                </dot:Repeater>
                <dot:Repeater DataSource={value: MasterPages.Where(r => r.Status == 'CompilationFailed' || r.Warnings.Length > 0 && ActiveTab == 3)} WrapperTagName=tbody >
                    <tr class-failure={value: Status == 'CompilationFailed'}>
                        <td>Master page</td>
                        <td></td>
                        <td title={value: VirtualPath}>{{value: VirtualPath}}</td>
                        <td>{{value: Status}}</td>
                        <td>
                            <dot:LinkButton Click="{command: _root.BuildView(_this)}" Text="Recompile" class="execute" />
                        </td>
                    </tr>
                    <_dotvvm-internal:CompilationDiagnosticRows
                        IncludeInPage={value: _root.ShowInlineDiagnostics && Errors.Length + Warnings.Length > 0}
                        Diagnostics={value: Enumerable.Concat(Errors, Warnings).ToArray()}
                        DisplayLimit={value: _root.DefaultShownDiagnosticLimit}  />
                </dot:Repeater>


            </table>
        </section>
    </main>
    <hr />

    <dot:InlineScript>
        var _dotvvmCompilationStatusPageCounter = { count: 0, current: 0, handler: -1, runIndex: -1 };
        function buildInQueue() {

            var views = document.getElementById("views");
            var buttons = views.querySelectorAll("input[type=button]");
            _dotvvmCompilationStatusPageCounter.runIndex++;
            _dotvvmCompilationStatusPageCounter.current = 0;
            _dotvvmCompilationStatusPageCounter.count = buttons.length;
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].click();
            }
        }
        dotvvm.events.afterPostback.subscribe(function () {
            _dotvvmCompilationStatusPageCounter.current++;
            if (_dotvvmCompilationStatusPageCounter.current == _dotvvmCompilationStatusPageCounter.count) {
                if (_dotvvmCompilationStatusPageCounter.runIndex == 0) {
                    buildInQueue();
                } else {
                    _dotvvmCompilationStatusPageCounter.handler = setTimeout(buildInQueue, 3000);
                }
            }
        });
    </dot:InlineScript>

    <dot:InlineScript>
        dotvvm.events.initCompleted.subscribe(function () {
            var button = document.getElementById("compile-all-button");
            if (button.classList.contains("js-compile-auto")) {
                button.click();
            }
        });
    </dot:InlineScript>
</body>
</html>
